{
	"details": "ERC-721 non-fungible token standard.",
	"methods": {
		"approve(address,uint256)": {
			"details": "Set or reaffirm the approved address for an NFT. This function can be changed to payable.",
			"params": {
				"_approved": "The new approved NFT controller.",
				"_tokenId": "The NFT to approve."
			}
		},
		"balanceOf(address)": {
			"details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
			"params": {
				"_owner": "Address for whom to query the balance."
			},
			"returns": {
				"_0": "Balance of _owner."
			}
		},
		"getApproved(uint256)": {
			"details": "Get the approved address for a single NFT.",
			"params": {
				"_tokenId": "The NFT to find the approved address for."
			},
			"returns": {
				"_0": "Address that _tokenId is approved for."
			}
		},
		"isApprovedForAll(address,address)": {
			"details": "Returns true if `_operator` is an approved operator for `_owner`, false otherwise.",
			"params": {
				"_operator": "The address that acts on behalf of the owner.",
				"_owner": "The address that owns the NFTs."
			},
			"returns": {
				"_0": "True if approved for all, false otherwise."
			}
		},
		"ownerOf(uint256)": {
			"details": "Returns the address of the owner of the NFT. NFTs assigned to the zero address are considered invalid, and queries about them do throw.",
			"params": {
				"_tokenId": "The identifier for an NFT."
			},
			"returns": {
				"_0": "Address of _tokenId owner."
			}
		},
		"safeTransferFrom(address,address,uint256)": {
			"details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
			"params": {
				"_from": "The current owner of the NFT.",
				"_to": "The new owner.",
				"_tokenId": "The NFT to transfer."
			}
		},
		"safeTransferFrom(address,address,uint256,bytes)": {
			"details": "Transfers the ownership of an NFT from one address to another address. This function can be changed to payable.",
			"params": {
				"_data": "Additional data with no specified format, sent in call to `_to`.",
				"_from": "The current owner of the NFT.",
				"_to": "The new owner.",
				"_tokenId": "The NFT to transfer."
			},
            "returns": {
                "_0": "Address of _tokenId owner."
            }
		},
		"setApprovalForAll(address,bool)": {
			"details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
			"params": {
				"_approved": "True if the operators is approved, false to revoke approval.",
				"_operator": "Address to add to the set of authorized operators."
			}
		},
		"transferFrom(address,address,uint256)": {
			"details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.  This function can be changed to payable.",
			"params": {
				"_from": "The current owner of the NFT.",
				"_to": "The new owner.",
				"_tokenId": "The NFT to transfer."
			}
		}
	}
}